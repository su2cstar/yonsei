library(MASS)
J=c(1,1,1,1,1,1)
X1=c(4,-1,2,0,-2,3)
X2=c(2,-3,0,-2,-4,1)
X=as.matrix(cbind(J,X1,X2))
Y=c(-2,7,2,5,8,-1)
M = X%*%ginv((t(X)%*%X))%*%t(X)
Mj = J%*%ginv((t(J)%*%J))%*%t(J)
t(Y)%*%(M-Mj) %*%Y
library('MASS')
?ginv
summary(aov(y~ A + B + AB -1))
#Data input
y= c(24,22,12,9,10,11,10,12,5,3,4)
Wr1 = rep(1,11)
Wr2 = c(rep(1,6),rep(0,5))
Wr3 = c(rep(0,6),rep(1,5))
A = cbind(Wr2,Wr3)
Wr4 = c(1,1,0,0,0,0,1,1,0,0,0)
Wr5 = c(0,0,1,0,0,0,0,0,1,1,0)
B = cbind(Wr4,Wr5,Wr6)
Wr6 = c(0,0,0,1,1,1,0,0,0,0,1)
Wr7 = c(1,1,0,0,0,0,0,0,0,0,0)
Wr8 = c(0,0,1,0,0,0,0,0,0,0,0)
Wr9 = c(0,0,0,1,1,1,0,0,0,0,0)
Wr10= c(0,0,0,0,0,0,1,1,0,0,0)
Wr11= c(0,0,0,0,0,0,0,0,1,1,0)
Wr12= c(0,0,0,0,0,0,0,0,0,0,1)
Wr6 = c(0,0,0,1,1,1,0,0,0,0,1)
B = cbind(Wr4,Wr5,Wr6)
summary(aov(y~ A + B + AB -1))
AB1 = cbind(Wr7,Wr8,Wr9)
AB2 = cbind(Wr10,Wr11,Wr12)
summary(aov(y~ A + B + AB1 + AB2 -1))
A
B
summary(aov(y~ A + B + cbind(AB1, AB2)))
cbind(AB1, AB2)
AB = cbind(AB1, AB2)
summary(aov(y~ A + B + AB))
summary(aov(y~ A + B + A*B))
summary(aov(y~ A + B + AB))
summary(lm(y~ A + B + AB))
lm2 = lm(y ~ Wr1 + Wr2 + Wr4 +Wr5 + Wr7 + Wr8-1) # ?뿬湲곗꽌 constraint瑜? ?꽔?뒗嫄????
summary(lm2)
summary(lm(y~ A + B + AB))
alpha = as.factor(c(1,1,1,1,1,1,2,2,2,2,2))
beta = as.factor(c(1,1,2,3,3,3,1,1,2,2,3))
dd = data.frame(alpha,beta)
mu = as.factor(c(1,1,2,3,3,3,4,4,5,5,6))
cc = data.frame(mui = mu)
model.matrix(~ mui, cc)
model.matrix(~ alpha + beta + alpha*beta, dd)
model.matrix(~ alpha + beta + alpha*beta, dd, contrasts = list(alpha = "contr.sum",beta = "contr.sum"))
aov20 = aov(y ~ mui - 1, cc)
summary(aov20)
aov21 = aov(y ~ alpha + beta + alpha*beta, dd)
summary(aov21)
aov22 = aov(y ~ alpha + beta + alpha*beta, dd, contrasts = list(alpha = "contr.sum",beta = "contr.sum"))
summary(aov22)
lm20 = lm(y ~ mui - 1 , cc)
summary(lm20)
lm21 = lm(y ~ alpha + beta + alpha*beta, dd)
summary(lm21)
lm22 = lm(y ~ alpha + beta + alpha*beta, dd, contrasts = list(alpha = "contr.sum",beta = "contr.sum"))
summary(lm22)
summary(aov(y~ A + B + AB))
summary(lm(y~ A + B + AB))
1/(1+exp(1))
exp(1)/(1+exp(1))
library(MASS)
#Data input
y= c(280,290,285,300,310,295,270,285,290,230,235,240,260,240,235,220,225,230)
Wu1 = c(rep(1,3),rep(0,15))
Wu2 = c(rep(0,3),rep(1,3),rep(0,12))
Wu3 = c(rep(0,6),rep(1,3),rep(0,9))
Wu4 = c(rep(0,9),rep(1,3),rep(0,6))
Wu5 = c(rep(0,12),rep(1,3),rep(0,3))
Wu6 = c(rep(0,15),rep(1,3))
Wr1 = rep(1,18)
Wr3 = c(rep(0,9),rep(1,9))
Wr4 = c(rep(1,3),rep(0,6),rep(1,3),rep(0,6))
Wr5 = c(rep(0,3),rep(1,3),rep(0,6),rep(1,3),rep(0,3))
Wr6 = c(rep(0,6),rep(1,3),rep(0,6),rep(1,3))
B = cbind(Wr4,Wr5,Wr6)
Wr2 = c(rep(1,9),rep(0,9))
Wr7 = Wu1
Wr9 = Wu3
Wu = cbind(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6)
Wr11= Wu5
Wr12= Wu6
AB1 = cbind(Wr7,Wr8,Wr9)
Wr = cbind(Wr1,Wr2,Wr3,Wr4,Wr5,Wr6,Wr7,Wr8,Wr9,Wr10,Wr11,Wr12)
X1 = Wr1
AB2 = cbind(Wr10,Wr11,Wr12)
X2 = Wr2 - Wr3
X3 = Wr4 - Wr6
X4 = Wr5 - Wr6
X5 = X2*X3
Wr8 = Wu2
Wr10= Wu4
A = cbind(Wr2,Wr3)
X6 = X2*X4
library(MASS)
#Data input
y= c(280,290,285,300,310,295,270,285,290,230,235,240,260,240,235,220,225,230)
Wu1 = c(rep(1,3),rep(0,15))
Wu2 = c(rep(0,3),rep(1,3),rep(0,12))
Wu3 = c(rep(0,6),rep(1,3),rep(0,9))
Wu4 = c(rep(0,9),rep(1,3),rep(0,6))
Wu5 = c(rep(0,12),rep(1,3),rep(0,3))
Wu6 = c(rep(0,15),rep(1,3))
Wu = cbind(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6)
Wr1 = rep(1,18)
Wr2 = c(rep(1,9),rep(0,9))
Wr3 = c(rep(0,9),rep(1,9))
A = cbind(Wr2,Wr3)
Wr4 = c(rep(1,3),rep(0,6),rep(1,3),rep(0,6))
Wr5 = c(rep(0,3),rep(1,3),rep(0,6),rep(1,3),rep(0,3))
Wr6 = c(rep(0,6),rep(1,3),rep(0,6),rep(1,3))
B = cbind(Wr4,Wr5,Wr6)
Wr7 = Wu1
Wr8 = Wu2
Wr9 = Wu3
Wr10= Wu4
Wr11= Wu5
Wr12= Wu6
AB1 = cbind(Wr7,Wr8,Wr9)
AB2 = cbind(Wr10,Wr11,Wr12)
Wr = cbind(Wr1,Wr2,Wr3,Wr4,Wr5,Wr6,Wr7,Wr8,Wr9,Wr10,Wr11,Wr12)
X1 = Wr1
X2 = Wr2 - Wr3
X3 = Wr4 - Wr6
X4 = Wr5 - Wr6
X5 = X2*X3
X6 = X2*X4
X = cbind(X1,X2,X3,X4,X5,X6)
# meke OOP function
OOP = function(X){
return(X%*%ginv(t(X)%*%X)%*%t(X))
}
Mu1 = OOP(Wu1+Wu2+Wu3+Wu4+Wu5+Wu6)
Mu2 = OOP(Wr1)
Mu3 = OOP(X1)
Mu1 = OOP(Wu)
Mu1
OOP(Wr1)
OOP(Wu)
OOP(X1)
OOP(Wu)
OOP(Wr)
OOP(X)
all.equal(M1,M2)
M1 = OOP(Wu)
M2 = OOP(Wr)
M3 = OOP(X)
all.equal(M1,M2)
all.equal(M1,M3)
Wu
Wr
X
# meke OOP function
OOP = function(X){
return(X%*%ginv(t(X)%*%X)%*%t(X))
}
M1 = OOP(Wu)
M2 = OOP(Wr)
M3 = OOP(X)
all.equal(M1,M2)
all.equal(M1,M3)
y= c(24,22,12,9,10,11,10,12,5,3,4)
## make Wu
Wu1 = c(rep(1,2),rep(0,9))
Wu2 = c(rep(0,2),1,rep(0,8))
Wu3 = c(rep(0,3),rep(1,3),rep(0,5))
Wu4 = c(rep(0,6),rep(1,2),rep(0,3))
Wu5 = c(rep(0,8),rep(1,2),0)
Wu6 = c(rep(0,10),1)
Wu = cbind(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6)
## make Wr
Wr1 = rep(1,11)
Wr2 = c(rep(1,6),rep(0,5))
Wr3 = c(rep(0,6),rep(1,5))
A = cbind(Wr2,Wr3)
Wr4 = c(1,1,0,0,0,0,1,1,0,0,0)
Wr5 = c(0,0,1,0,0,0,0,0,1,1,0)
Wr6 = c(0,0,0,1,1,1,0,0,0,0,1)
B = cbind(Wr4,Wr5,Wr6)
Wr7 = c(1,1,0,0,0,0,0,0,0,0,0)
Wr8 = c(0,0,1,0,0,0,0,0,0,0,0)
Wr9 = c(0,0,0,1,1,1,0,0,0,0,0)
Wr10= c(0,0,0,0,0,0,1,1,0,0,0)
Wr11= c(0,0,0,0,0,0,0,0,1,1,0)
Wr12= c(0,0,0,0,0,0,0,0,0,0,1)
AB1 = cbind(Wr7,Wr8,Wr9)
AB2 = cbind(Wr10,Wr11,Wr12)
AB = cbind(AB1,AB2)
Wr = cbind(Wr1,Wr2,Wr3,Wr4,Wr5,Wr6,Wr7,Wr8,Wr9,Wr10,Wr11,Wr12)
## make X
X1 = Wr1
X2 = Wr2 - Wr3
X3 = Wr4 - Wr6
X4 = Wr5 - Wr6
X5 = X2*X3
X6 = X2*X4
X = cbind(X1,X2,X3,X4,X5,X6)
Wu
Wr
X
##set up function
#make orthogonal projection matrix
OOP = function(X){
return(X%*%ginv(t(X)%*%X)%*%t(X))
}
# effect of X
M1 = OOP(Wu)
M2 = OOP(Wr)
M3 = OOP(X)
all.equal(M1,M2)
all.equal(M1,M3)
library(pracma)
library(MASS)
## make matrix
y= c(24,22,12,9,10,11,10,12,5,3,4)
## make Wu
Wu1 = c(rep(1,2),rep(0,9))
Wu2 = c(rep(0,2),1,rep(0,8))
Wu3 = c(rep(0,3),rep(1,3),rep(0,5))
Wu4 = c(rep(0,6),rep(1,2),rep(0,3))
Wu5 = c(rep(0,8),rep(1,2),0)
Wu6 = c(rep(0,10),1)
Wu = cbind(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6)
## make Wr
Wr1 = rep(1,11)
Wr2 = c(rep(1,6),rep(0,5))
Wr3 = c(rep(0,6),rep(1,5))
A = cbind(Wr2,Wr3)
Wr4 = c(1,1,0,0,0,0,1,1,0,0,0)
Wr5 = c(0,0,1,0,0,0,0,0,1,1,0)
Wr6 = c(0,0,0,1,1,1,0,0,0,0,1)
B = cbind(Wr4,Wr5,Wr6)
Wr7 = c(1,1,0,0,0,0,0,0,0,0,0)
Wr8 = c(0,0,1,0,0,0,0,0,0,0,0)
Wr9 = c(0,0,0,1,1,1,0,0,0,0,0)
Wr10= c(0,0,0,0,0,0,1,1,0,0,0)
Wr11= c(0,0,0,0,0,0,0,0,1,1,0)
Wr12= c(0,0,0,0,0,0,0,0,0,0,1)
AB1 = cbind(Wr7,Wr8,Wr9)
AB2 = cbind(Wr10,Wr11,Wr12)
AB = cbind(AB1,AB2)
Wr = cbind(Wr1,Wr2,Wr3,Wr4,Wr5,Wr6,Wr7,Wr8,Wr9,Wr10,Wr11,Wr12)
## make X
X1 = Wr1
X2 = Wr2 - Wr3
X3 = Wr4 - Wr6
X4 = Wr5 - Wr6
X5 = X2*X3
X6 = X2*X4
X = cbind(X1,X2,X3,X4,X5,X6)
##set up function
#make orthogonal projection matrix
OOP = function(X){
return(X%*%ginv(t(X)%*%X)%*%t(X))
}
#make bhat = ginv(X)My
getCoef = function(X){
return(ginv(X)%*%X%*%ginv(t(X)%*%X)%*%t(X)%*%y)
}
#calculate SS funtion
calcSS = function(X){
return(t(y)%*%(X)%*%y)
}
##make M matrix
## effect of mu
Mu1 = OOP(Wu1+Wu2+Wu3+Wu4+Wu5+Wu6)
Mu2 = OOP(Wr1)
Mu3 = OOP(X1)
all.equal(Mu1,Mu2,Mu3)
Mu = Mu1
# effect of alpha
Ma1 =OOP(cbind(Wu1+Wu2+Wu3,Wu4+Wu5+Wu6))
Ma2 = OOP(A)
Ma3 = OOP(cbind(X1,X2))
all.equal(Ma1,Ma2,Ma3)
Ma = Ma1
# effect of beta
Mb1 = OOP(cbind(Wu1+Wu4,Wu2+Wu5,Wu3+Wu6))
Mb2 = OOP(B)
Mb3 = OOP(cbind(X1,X3,X4))
all.equal(Mb1,Mb2,Mb3)
Mb = Mb1
# effect of X
M1 = OOP(Wu)
M2 = OOP(Wr)
M3 = OOP(X)
all.equal(M1,M2)
all.equal(M1,M3)
M = M1
## calcutate sum of square
#as C(X) = C(Wu) = C(Wr) = C(J) + C(A) + C(B) + C(AB)
#we need the Astar , Bstar , ABstar which chnage the + to directsum
#Astar = (M - Mj)A
#Bstar = (M-Mastar)B
#ABstar = (M-Mbstar)AB
Astar = (M - Mu)%*%A
Bstar = (M - Mu)%*%(M- OOP(Astar))%*%B
ABstar = (M - Mu)%*%(M- OOP(Astar))%*%(M- OOP(Bstar))%*%AB
#SS global mean
SSu = calcSS(Mu)
#SS(A)
SSA = calcSS(OOP(Astar))
#SS(B)
SSB = calcSS(OOP(Bstar))
#SS(AB)
SSAB = calcSS(OOP(ABstar))
#SSE
SSE = calcSS(diag(11)-M)
#SST
SSTo = t(y)%*%y
#SSTo = SSu + SSA + SSB + SSAB + SSE
SSTo == SSu + SSA + SSB + SSAB + SSE
##ANOVA table
aov1 = aov(y ~ Wu1 + Wu2 +Wu3 + Wu4+ Wu5+ Wu6 -1)
aov2 = aov(y ~ Wr1 + cbind(Wr2, Wr3) + cbind(Wr4, Wr5, Wr6) + cbind(Wr7, Wr8, Wr9, Wr10, Wr11, Wr12) -1)
aov3 = aov(y ~ X1+X2+cbind(X3,X4)+cbind(X5,X6) - 1 )
summary(aov1)
summary(aov2)
summary(aov3)
##ANOVA table
aov1 = aov(y ~ c(Wu1,Wu2,Wu3,Wu4,Wu5,u6) -1)
##ANOVA table
aov1 = aov(y ~ c(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6) -1)
##ANOVA table
aov1 = aov(y ~ Wu)
summary(aov1)
summary(aov2)
Wu
##ANOVA table
aov1 = aov(y ~ Wu1 + Wu2 +Wu3 + Wu4+ Wu5+ Wu6 -1)
summary(aov1)
##ANOVA table
aov1 = aov(y ~ Wu)
summary(aov1)
##ANOVA table
aov1 = aov(y ~ Wu-1)
summary(aov1)
## make X
X0 = Wr1
X1 = Wr2 - Wr3
X2 = Wr4 - Wr6
X3 = Wr5 - Wr6
X4 = X2*X3
X5 = X2*X4
X = cbind(X1,X2,X3,X4,X5,X6)
X
X = cbind(X0,X1,X2,X3,X4,X5)#,X6)
a = c(1,2,3,4,5,6)
cov(a)
a
cov(a,a)
c = cbind(a,b)
c
a = c(1,2,3,4,5,6)
b= c(2,3,4,5,6,7)
d = cbind(a,b)
d
cov(d,d)
boston
iris
Bostion
Boston
data(Boston)
data(boston)
library('car')
install.packages('car')
library(car)
boston
data(boston)
log(26/9)
log(1/8)
setwd("~/Rcode")
df = read.csv('ods_prop_test.csv')
library(readr)
ods_prop_test <- read_csv("ods_prop_test.csv")
View(ods_prop_test)
ods_prop_test
data.frame(ods_prop_test)
df = data.frame(ods_prop_test)
df
df[1]
df[,1]
df[:,1]
df[1,1]
df[1,]
cbind(df[1,]$x,df[2,]$x)
c(df[1,]$x,df[2,]$x)
x = c(df[1,]$x,df[2,]$x)
n = c(df[1,]$n,df[2,]$n)
prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
x
n
n = c(df[1,]$x,df[2,]$x)
x = c(df[1,]$n,df[2,]$n)
prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
print(i)
for (i in df) {
print(i)
}
for (i in row(df)) {
print(i)
}
df
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
a$p.value
df['p-value'][1] =0
df
df['x']
df['x'][1]
df['x'][,1]
df['x'][1,
df['x'][1,]
df['x'][1,]
df['x'][1,]
df['p-value'][1,] =0
df
df['p-value'] =rep(0,17)
df
df$`p-value`[1,]
df['p-value'][1,]
df['p-value'][1,] = na
df['p-value'][1,] = NA
df
for (i in 2:17) {
n = c(df[1,]$x,df[i,]$x)
x = c(df[1,]$n,df[i,]$n)
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
df['p-value'][i,] = a$p.value
}
df
for (i in 2:17) {
n = c(df[1,]$x,df[i,]$x)
x = c(df[1,]$n,df[i,]$n)
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
df['p-value'][i,] = round(a$p.value,3)
}
df
write.csv(df,file ='prop_test.csv')
df =read.csv('ods_prop_test.csv',header = T)
df =read.csv('ods_prop_test.csv',header = T ,encoding = 'CP949')
df =read.csv('ods_prop_test.csv',header = T ,encoding = 'UTF8')
?df =read.csv('ods_prop_test.csv',header = T ,encoding = 'UTF8')
df <- read_csv("ods_prop_test.csv")
df
df['x'][1,]
df['p-value'] =rep(0,17)
df['p-value'][1,] = NA
df
for (i in 2:17) {
n = c(df[1,]$x,df[i,]$x)
x = c(df[1,]$n,df[i,]$n)
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
df['p-value'][i,] = round(a$p.value,3)
}
df
write.csv(df,file ='prop_test.csv')
setwd('C:\Users\ahn92\Dropbox\Sources\ODS\Final_project\Rcode')
setwd('C:\Users\ahn92\Dropbox\Sources\ODS\Final_project\Rcode')
setwd('C:/Users/ahn92/Dropbox/Sources/ODS/Final_project\Rcode')
setwd('C:/Users/ahn92/Dropbox/Sources/ODS/Final_project/Rcode')
df <- read_csv("prop_test.csv")
df
df <- read.csv("prop_test.csv")
read_csv
df <- read_csv("prop_test.csv")
df
nrow(df)
df['p-value'] =rep(0,nrow(df))
df['p-value'][1,] = NA
df <- read_csv("prop_test.csv")
df
df['p-value'] =rep(0,nrow(df))
df['p-value'][1,] = NA
for (i in 2:nrow(df)) {
n = c(df[1,]$n,df[i,]$n)
x = c(df[1,]$p * df[1,]$n,df[i,]$p * df[i,]$n)
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
df['p-value'][i,] = round(a$p.value,3)
}
write.csv(df,file ='prop_test.csv')
df
setwd('C:/Users/ahn92/Dropbox/Sources/ODS/Final_project')
df <- read_csv("result.csv")
df
?read_csv
df <- read_csv("prop_test.csv")
setwd('C:/Users/ahn92/Dropbox/Sources/ODS/Final_project/Rcode')
df
df <- read_csv("prop_test.csv")
df
setwd('C:/Users/ahn92/Dropbox/Sources/ODS/Final_project/Rcode')
df <- read_csv("prop_test.csv")
df
df['p-value'] =rep(0,nrow(df))
df['p-value'][1,] = NA
for (i in 2:nrow(df)) {
n = c(df[1,]$n,df[i,]$n)
x = c(df[1,]$p * df[1,]$n,df[i,]$p * df[i,]$n)
a = prop.test(x = x, n = n,  alternative = c("two.sided"), conf.level = 0.95)
df['p-value'][i,] = round(a$p.value,3)
}
write.csv(df,file ='prop_test_result.csv')
df
