setwd("C:/Users/ahn92/Dropbox/Sources/DM")
library(nnet)
## import data from python
train = read.csv('nn_test.csv')
test =read.csv('nn_test.csv')
X_train = as.matrix(train[1:2])
y_train = as.matrix(train[3])
X_test = as.matrix(test[1:2])
y_test = as.matrix(test[3])
res=data.frame()
set.seed(0)
for (i in 2:10) {
nn_model1 <- nnet(X2 ~ X0+X1, data=train, size=i,linout=TRUE)
mse = sum((y_test - predict(nn_model1,X_test))^2)/(length(y_test)-1)
res[i-1,1] = i
res[i-1,2] = mse
}
draw3dPlot =function(){
X1 = seq(-3, 3, length.out = 50)
X2 = X1
func = function(X1 ,X2){
sigmoid(2*X1 + 2*X2) + (3*X1 - 3*X2)^2
}
z <- outer(X1, X2, func)
return(persp(X1, X2, z))
}
drawMSEdPlot = function(){
plot(res,type = 'l')
}
optNode = res[res[2] == min(res[2]),][1]
optMSE = res[res[2] == min(res[2]),][2]
## OUTPUT
draw3dPlot()
1/(1+exp(-X))
sigmoid = function(X){
1/(1+exp(-X))
}
draw3dPlot =function(){
X1 = seq(-3, 3, length.out = 50)
X2 = X1
func = function(X1 ,X2){
sigmoid(2*X1 + 2*X2) + (3*X1 - 3*X2)^2
}
z <- outer(X1, X2, func)
return(persp(X1, X2, z))
}
drawMSEdPlot = function(){
plot(res,type = 'l')
}
optNode = res[res[2] == min(res[2]),][1]
optMSE = res[res[2] == min(res[2]),][2]
## OUTPUT
draw3dPlot()
drawMSEdPlot()
sprintf("MSE is minimum with %.1f Node(s) MSE is %.3f", optNode, optMSE)
drawMSEdPlot()
?all.equal()
all.equal(1,1,2)
all.equal(1,2)
all.equal(1,1)
library(pracma)
library(MASS)
y= c(24,22,12,9,10,11,10,12,5,3,4)
## make Wu
Wu1 = c(rep(1,2),rep(0,9))
Wu2 = c(rep(0,2),1,rep(0,8))
Wu3 = c(rep(0,3),rep(1,3),rep(0,5))
Wu4 = c(rep(0,6),rep(1,2),rep(0,3))
Wu5 = c(rep(0,8),rep(1,2),0)
Wu6 = c(rep(0,10),1)
Wu = cbind(Wu1,Wu2,Wu3,Wu4,Wu5,Wu6)
## make Wr
Wr1 = rep(1,11)
Wr2 = c(rep(1,6),rep(0,5))
Wr3 = c(rep(0,6),rep(1,5))
A = cbind(Wr2,Wr3)
Wr4 = c(1,1,0,0,0,0,1,1,0,0,0)
Wr5 = c(0,0,1,0,0,0,0,0,1,1,0)
Wr6 = c(0,0,0,1,1,1,0,0,0,0,1)
B = cbind(Wr4,Wr5,Wr6)
Wr7 = c(1,1,0,0,0,0,0,0,0,0,0)
Wr8 = c(0,0,1,0,0,0,0,0,0,0,0)
Wr9 = c(0,0,0,1,1,1,0,0,0,0,0)
Wr10= c(0,0,0,0,0,0,1,1,0,0,0)
Wr11= c(0,0,0,0,0,0,0,0,1,1,0)
Wr12= c(0,0,0,0,0,0,0,0,0,0,1)
AB1 = cbind(Wr7,Wr8,Wr9)
AB2 = cbind(Wr10,Wr11,Wr12)
AB = cbind(AB1,AB2)
Wr = cbind(Wr1,Wr2,Wr3,Wr4,Wr5,Wr6,Wr7,Wr8,Wr9,Wr10,Wr11,Wr12)
## make X
X1 = Wr1
X2 = Wr2 - Wr3
X3 = Wr4 - Wr6
X4 = Wr5 - Wr6
X5 = X2*X3
X6 = X2*X4
X = cbind(X1,X2,X3,X4,X5,X6)
##set up function
#make orthogonal projection matrix
OOP = function(X){
return(X%*%ginv(t(X)%*%X)%*%t(X))
}
#make bhat = ginv(X)My
getCoef = function(X){
return(ginv(X)%*%X%*%ginv(t(X)%*%X)%*%t(X)%*%y)
}
#calculate SS funtion
calcSS = function(X){
return(t(y)%*%(X)%*%y)
}
##make M matrix
## effect of mu
Mu1 = OOP(Wu1+Wu2+Wu3+Wu4+Wu5+Wu6)
Mu2 = OOP(Wr1)
Mu3 = OOP(X1)
all.equal(Mu1,Mu2,Mu3)
Mu = Mu1
# effect of alpha
Ma1 =OOP(cbind(Wu1+Wu2+Wu3,Wu4+Wu5+Wu6))
Ma2 = OOP(A)
Ma3 = OOP(cbind(X1,X2))
all.equal(Ma1,Ma2,Ma3)
Ma = Ma1
all.equal(Mu1,Mu2,Ma3)
all.equal(Mu1,Mu2),Mu3)
all.equal(Mu1,Mu3)
all.equal(Mu1,Ma3)
