}
}
total = c(100,20000,10000,50000)
data = data.frame(total,nrwo=4)
data
data$total
data = data.frame(total,nrow=4)
data
data = data.frame(total)
data
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
} else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
} else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
} else {
data$total[i]='4th'
}
}
data
data$total[i]
data = data.frame(total)
data$total[i]
data$total[i]<=8591
19156<data$total[i]&data$total[i]<=46825
i=2
19156<data$total[i]&data$total[i]<=46825
a=[]
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
a[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
a[i]='2nd'
}
else if(19156<data$total[i]&data$total[i]<=46825){
a[i]='3rd'
}
else {
a[i]='4th'
}
}
a=[]
a=data.frame()
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
a[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
a[i]='2nd'
}
else if(19156<data$total[i]&data$total[i]<=46825){
a[i]='3rd'
}
else {
a[i]='4th'
}
}
a
a=c(0,0,0,0)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
a[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
a[i]='2nd'
}
else if(19156<data$total[i]&data$total[i]<=46825){
a[i]='3rd'
}
else {
a[i]='4th'
}
}
a
total = c(100,20000,10000,50000)
data = list(total = c(100,20000,10000,50000))
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}
else {
data$total[i]='4th'
}
}
data
data = data.frame(total)
if (data$total[i]<=8591){
data$total[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}
else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}
elif(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
} else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
} else {
data$total[i]='4th'
}
}
data
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
data
total = c(100,20000,10000,50000)
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
data
data = data.frame(total)
data
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
data
data = data.frame(total)
data
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
data
i=2
data = data.frame(total)
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}
data
nrow(data)
1:nrow(data)
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
data
for i in nrow(data){print(i)}
for i in nrow(data){i}
for (i in nrow(data)){i}
for (i in nrow(data)){cat(i)}
for (i in 1:nrow(data)){cat(i)}
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
data
'1st'<=8591
'4th'<=8591
'3rd'<=8591
total = c(100,20000,10000,50000)
data = data.frame(total)
for (i in 1:2)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
for (i in 1:2)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
for (i in 1:2))
for (i in (1:2))
{
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
data
data = data.frame(total)
for (i in 2)
{
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
data
data = data.frame(total)
for (i in 1:2){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
}
data
if(a>1){print(11)} else if(a=2){print(22)}
if(a>1){print(11)} else if(a==2){print(22)}
a=2
if(a>1){print(11)} else if(a==2){print(22)}
for(i in 1:2){
if(a>1){print(11)} else if(a==2){print(22)}
}
for(a in 2:3){
if(a==2){print(11)} else if(a>=2){print(22)}
}
for(a in 1:3){
if(a==2){print(11)} else if(a>=2){print(22)} else{print(123)}
}
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
}else {
data$total[i]='4th'
}
print(i)
}
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
print('1st')
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
print('2st')
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
print('3st')
}else {
data$total[i]='4th'
print('rst')
}
print(i)
}
data = data.frame(total)
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
data$total[i]='1st'
print(i)
print(data$total[i])
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
print('2st')
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
print('3st')
}else {
data$total[i]='4th'
print('rst')
}
print(i)
}
data = data.frame(total)
data
for (i in 1:nrow(data)){
if (data$total[i]<=8591){
print(data$total[i])
data$total[i]='1st'
print(i)
print(data$total[i])
}else if(8591<data$total[i]&data$total[i]<=19156){
data$total[i]='2nd'
print('2st')
}else if(19156<data$total[i]&data$total[i]<=46825){
data$total[i]='3rd'
print('3st')
}else {
data$total[i]='4th'
print('rst')
}
}
##set working directory and install package
setwd('C:\\Users\\SUIC_STAR\\Dropbox\\Sources\\Ybigta\\PJ_psat_ybig\\Drugstore_data')
#install.packages('h2o')
#train = read.csv('train.csv')
##call library
library(data.table)
library(h2o)
##read data files
train <- fread("train.csv",stringsAsFactors = T)
test  <- fread("test.csv",stringsAsFactors = T)
store <- fread("store.csv",stringsAsFactors = T)
ans <- fread('test_ans.csv',stringsAsFactors = T)
##use train data whose sales is not zero
train <- train[Sales > 0,]
##merge the data table inner join with 'Store' Key
train <- merge(train,store,by="Store")
test <- merge(test,store,by="Store")
test_ans <- merge(ans,store,by="Store")
##change the data type of Date column to 'Date' Type
train[,Date:=as.Date(Date)]
test[,Date:=as.Date(Date)]
##set the data type of each data
train[,month:=as.integer(format(Date, "%m"))]
train[,year:=as.integer(format(Date, "%y"))]
train[,Store:=as.factor(as.numeric(Store))]
test[,month:=as.integer(format(Date, "%m"))]
test[,year:=as.integer(format(Date, "%y"))]
test[,Store:=as.factor(as.numeric(Store))]
test[,StateHoliday:=as.factor(StateHoliday)]
## log transformation to not be as sensitive to high sales
train[,logSales:=log1p(Sales)]
## Use H2O's random forest
## Start cluster with all available threads
## Use H2O's random forest
## Start cluster with all available threads
h2o.init(nthreads=-1,max_mem_size='12G')
## Load data into cluster from R
trainHex<-as.h2o(train)
## Set up variable to use all features other than those specified here
features<-colnames(train)[!(colnames(train) %in% c("Id","Date","Sales","logSales","Customers"))]
## Load test data into cluster from R
testHex<-as.h2o(test)
## make rmspe function
my_rmspe=function(test,pred){
rmspe = 0
for (i in 1:length(test$Sales)) {
if (test$Sales[i]!=0) {
rmspe = rmspe + ((test$Sales[i]-pred[i])/test$Sales[i])^2
}
#else{
#  rmspe = rmspe + ((test$Sales[i]-pred[i])/(test$Sales[i]+0.001))^2
#}
}
return(sqrt(rmspe/length(test$Sales)))
}
## make rmspe function
my_rmspe=function(test,pred){
rmspe = 0
for (i in 1:length(test$Sales)) {
if (test$Sales[i]!=0) {
rmspe = rmspe + ((test$Sales[i]-pred[i])/test$Sales[i])^2
}
else{
rmspe = rmspe + ((test$Sales[i]-pred[i])/(test$Sales[i]+0.001))^2
}
}
return(sqrt(rmspe/length(test$Sales)))
}
## Train a random forest using all default parameters
rfHex <- h2o.randomForest(x=features,
y="logSales",
ntrees = 100,
max_depth = 30,
nbins_cats = 1115, ## allow it to fit store ID
training_frame=trainHex)
summary(rfHex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions<-as.data.frame(h2o.predict(rfHex,testHex))
## Return the predictions to the original scale of the Sales data
pred <- expm1(predictions[,1])
##change the values of pred whose open is 0
pred[test$Open==0] = 0
#calculate rmspe as
my_rmspe(test_ans,pred)
## make rmspe function
my_rmspe=function(test,pred){
rmspe = 0
for (i in 1:length(test$Sales)) {
if (test$Sales[i]!=0) {
rmspe = rmspe + ((test$Sales[i]-pred[i])/test$Sales[i])^2
}
else{
rmspe = rmspe + ((test$Sales[i]-pred[i])/(test$Sales[i]+0.001))^2
}
}
return(sqrt(rmspe/length(test$Sales)))
}
#calculate rmspe as
my_rmspe(test_ans,pred)
#############################GBM#########################
gbmHex <- h2o.gbm(x=features,
y="logSales",
ntrees = 50,
max_depth = 30,
nbins_cats = 1115, ## allow it to fit store ID
training_frame=trainHex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions_gbm<-as.data.frame(h2o.predict(gbmHex,testHex))
## Return the predictions to the original scale of the Sales data
pred_gbm <- expm1(predictions_gbm[,1])
##change the values of pred whose open is 0
pred_gbm[test$Open==0] = 0
my_rmspe(test_ans,pred_gbm)
#############################GBM#########################
gbmHex <- h2o.gbm(x=features,
y="logSales",
ntrees = 100,
max_depth = 30,
nbins_cats = 1115, ## allow it to fit store ID
training_frame=trainHex)
summary(gbmHex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions_gbm<-as.data.frame(h2o.predict(gbmHex,testHex))
## Return the predictions to the original scale of the Sales data
pred_gbm <- expm1(predictions_gbm[,1])
##change the values of pred whose open is 0
pred_gbm[test$Open==0] = 0
my_rmspe(test_ans,pred_gbm)
