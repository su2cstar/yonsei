}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
passin = (glambda*n)/2
res = soft_threshold(a,passin)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = train[,9]
cylcic(x = x,y = y,beta_init = beta_init)
##data input
#rm(list=ls())
dat <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data") # prostate cancer data
##hyper parameter setting
glambda = 0.05
max_iter = 100
beta_init = c(0.95129374,  0.87611202,  0.86478407,  1.17431948, -0.20952248,
-0.30810002, -1.31313222, -0.52341675)
##normalize columns function
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
##soft threshold function
soft_threshold <- function(a, lambda) {
if ( -a > lambda) {
out = a + lambda
}
else if(a > lambda){
out = a - lambda
}
else{
out = 0
}
return(out)
}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
passin = (glambda*n)/2
res = soft_threshold(a,passin)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = nor_train[,9]
cylcic(x = x,y = y,beta_init = beta_init)
##data input
#rm(list=ls())
dat <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data") # prostate cancer data
##hyper parameter setting
glambda = 0.05
max_iter = 100
beta_init = c(0.95129374,  0.87611202,  0.86478407,  1.17431948, -0.20952248,
-0.30810002, -1.31313222, -0.52341675)
##normalize columns function
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
##soft threshold function
soft_threshold <- function(a, lambda) {
if ( -a > lambda) {
out = a + lambda
}
else if(a > lambda){
out = a - lambda
}
else{
out = 0
}
return(out)
}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
passin = (glambda*n)/2
res = soft_threshold(a,passin)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = train[,9]
cylcic(x = x,y = y,beta_init = beta_init)
beta_init = rnorm(8)
random.seed(0)
beta_init = rnorm(8)
out = cy2lcic(x = x,y = y,beta_init = beta_init)
out = cylcic(x = x,y = y,beta_init = beta_init)
out[-1]
out[:-1]
out[,-1]
out[-1,]
tail(out,1)
data.frame(tail(out,1))
rownames(outlast)=NULL
outlast = tail(out,1)
rownames(outlast)=NULL
outlast
##data input
#rm(list=ls())
dat <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data") # prostate cancer data
lasso <- function(glambda) {
##hyper parameter setting
glambda = 0.05
max_iter = 1000
set.seed(0)
beta_init = rnorm(8)
##normalize columns function
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
##soft threshold function
soft_threshold <- function(a, lambda) {
if ( -a > lambda) {
out = a + lambda
}
else if(a > lambda){
out = a - lambda
}
else{
out = 0
}
return(out)
}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
passin = (glambda*n)/2
res = soft_threshold(a,passin)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = train[,9]
out = cylcic(x = x,y = y,beta_init = beta_init)
outlast = tail(out,1)
rownames(outlast)=NULL
return(outlast)
}
lasso(0.1)
lasso(0.2)
lasso(0)
lasso(1)
lasso(10)
lasso <- function(glambda = 0.05) {
##hyper parameter setting
max_iter = 1000
set.seed(0)
beta_init = rnorm(8)
##normalize columns function
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
##soft threshold function
soft_threshold <- function(a, lambda) {
if ( -a > lambda) {
out = a + lambda
}
else if(a > lambda){
out = a - lambda
}
else{
out = 0
}
return(out)
}
# select beta
min_beta =function(x,y,beta,j){
n = length(y)
selector = seq(1,dim(x)[2])[-j]
norm_x_j = sqrt(sum(abs(x[,j])^2))
a = as.matrix(t(x[,j]))%*%(as.matrix(y) - as.matrix(x[,selector])%*%beta[selector])
passin = (glambda*n)/2
res = soft_threshold(a,passin)
return(res/(norm_x_j^2))
}
##main function
cylcic = function(x,y,beta_init){
beta = beta_init
beta_vals = beta
#print(beta)
d =dim(x)[2]
iter = 0
while (iter < max_iter) {
for (j in 1:d) {
min_beta_j = min_beta(x,y,beta,j)
beta[j] = min_beta_j
#print(beta)
}
beta_vals = cbind(beta_vals,beta)
iter = iter + 1
}
out = t(beta_vals)
row.names(out) = NULL
colnames(out) = colnames(x)
return(out)
}
train = dat[dat$train,]
test = dat[!dat$train,]
nor_train = apply(X = train,FUN = normalize ,MARGIN = 2)
nor_train = data.frame(nor_train)
x = nor_train[,-9:-10]
y = train[,9]
out = cylcic(x = x,y = y,beta_init = beta_init)
outlast = tail(out,1)
rownames(outlast)=NULL
return(outlast)
}
lasso(0.10)
lasso(0)
lasso(1)
lasso(2)
seq(from=0,to=2,by=0.01)
rbind(lasso(2),lasso(1))
ldf = lasso(0)
for (i in seq(from=0.01,to=2,by=0.01)) {
ldf = rbind(ldf,lasso(i))
}
row.names(ldf) = seq(from=0,to=2,by=0.01)
ldf
ldf[ldf$lcavol==0]
ldf$lcavol==0
ldf[1,]
ldf[ldf[,1==0]
ldf[ldf[,1==0]]
ldf[ldf[,1==0]]
ldf[ldf[,1]==0]
ldf[,1]==0
ldf[,ldf[,1]==0]
ldf[ldf[,1]==0,]
ldf[ldf[,1]==0,][1]
ldf[ldf[,1]==0,][1.]
ldf[ldf[,1]==0,][,1]
ldf[ldf[,1]==0,][1,]
ldf[ldf[,1]==0,]
ldf
plot(ldf[,1])
plot(ldf[,1],lty)
plot(ldf[,1],lty = 1)
plot(ldf[,1],lty = 2)
plot(ldf[,1],lty = 1)
plot(x=rownames(idf),y=ldf[,1],lty = 1)
plot(x=rownames(ldf),y=ldf[,1],lty = 1)
plot(x=rownames(ldf),y=ldf[,1],lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(ldf),y=ldf[,2],lty = 1)
plot(x=rownames(ldf),y=ldf[,1],lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
?plot
plot(x=rownames(ldf),y=ldf[,1],type= 'l',lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(ldf),y=ldf[,2],lty = 1)
lines(x=rownames(ldf),y=ldf[,2],lty = 1, col = 'red', lwd = 2)
vline(x = 0)
abline(v = 0)
abline(v = 0 , lty=2)
plot(x=rownames(ldf),y=ldf[,1],type= 'l',lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(ldf),y=ldf[,2],lty = 1, col = 'red', lwd = 2)
abline(v = 0 , lty=2)
abline(h = 0 , lty=2)
rldf = ldf[nrow(ldf):1,]
rldf
?plot(x=rownames(rldf),y=rldf[,1],type= 'l',lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
?plot
plot(x=rownames(rldf),y=rldf[,1],type= 'l',lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(rldf),y=rldf[,2],lty = 1, col = 'red', lwd = 2)
lines(x=rownames(rldf),y=rldf[,3],lty = 1, col = 'orange', lwd = 2)
lines(x=rownames(rldf),y=rldf[,4],lty = 1, col = 'yellow', lwd = 2)
lines(x=rownames(rldf),y=rldf[,5],lty = 1, col = 'green', lwd = 2)
lines(x=rownames(rldf),y=rldf[,6],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,7],lty = 1, col = 'darkblue', lwd = 2)
plot(x=rownames(rldf),y=rldf[,1],type= 'l',lty = 1 ,xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(rldf),y=rldf[,2],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,3],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,4],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,5],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,6],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,7],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,8],lty = 1, col = 'blue', lwd = 2)
abline(v = 0 , lty=2)
abline(h = 0 , lty=2)
plot(x=rownames(rldf),y=rldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(0,2),ylim=c(-0.3,1))
lines(x=rownames(rldf),y=rldf[,2],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,3],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,4],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,5],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,6],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,7],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,8],lty = 1, col = 'blue', lwd = 2)
abline(v = 0 , lty=2)
abline(h = 0 , lty=2)
plot(x=rownames(rldf),y=rldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(2,0),ylim=c(-0.3,1))
lines(x=rownames(rldf),y=rldf[,2],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,3],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,4],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,5],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,6],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,7],lty = 1, col = 'blue', lwd = 2)
lines(x=rownames(rldf),y=rldf[,8],lty = 1, col = 'blue', lwd = 2)
abline(v = 0 , lty=2)
abline(h = 0 , lty=2)
plot(x=rownames(ldf),y=ldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(2,0),ylim=c(-0.3,1))
lines(x=rownames(ldf),y=ldf[,2],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,3],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,4],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,5],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,6],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,7],lty = 1, col = 'blue')
lines(x=rownames(ldf),y=ldf[,8],lty = 1, col = 'blue')
abline(v = 0 , lty=2)
abline(h = 0 , lty=2)
ldf
ldf[0]
ldf[,0]
ldf[0,]
ldf[1,]
sum(abs(ldf[1,]))
ldf = data.frame(ldf)
sum(abs(ldf[1,]))
apply(X = ldf,FUN = fumction(x) /sum(abs(x))/sum(abs(ldf[1,])))
apply(X = ldf,FUN = function(x) /sum(abs(x))/sum(abs(ldf[1,])))
apply(X = ldf,FUN = function(x) sum(abs(x))/sum(abs(ldf[1,])))
apply(X = ldf,FUN = function(x) sum(abs(x))/sum(abs(ldf[1,])),MARGIN = 1)
ldf$shrinkage = apply(X = ldf,FUN = function(x) sum(abs(x))/sum(abs(ldf[1,])),MARGIN = 1)
ldf
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(0,1),ylim=c(-0.3,1))
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'blue')
abline(h = 0 , lty=2)
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(0,1),ylim=c(-0.3,1),xlab="Month", ylab="Coffee")
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(0,1),ylim=c(-0.3,1),xlab="Coefficients", ylab="Shringate Factor s")
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='blue',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'blue')
abline(h = 0 , lty=2)
>lines
?lines
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'pink')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'b',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
l
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
colnames(ldf)
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
legend(1, 95, legend=colnames(ldf),
col=coldic, lty=1:2, cex=0.8)
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
legend(1, 95, legend=colnames(ldf),
col=coldic, lty=1:2, cex=0.8)
legend(1, 95, legend=colnames(ldf), col=coldic)
legend(0.1, 0.9, legend=colnames(ldf), col=coldic)
legend(0.1, 0.9, legend=colnames(ldf),lty = rep(1,8), col=coldic)
legend(0, 1, legend=colnames(ldf),lty = rep(1,8), col=coldic)
legend(0, 1, legend=colnames(ldf),lty = rep(1,8), col=coldic, cex = 0.8)
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
legend(0, 1, legend=colnames(ldf),lty = rep(1,8), col=coldic, cex = 0.8)
plotlasso <- function() {
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
legend(0, 1, legend=colnames(ldf),lty = rep(1,8), col=coldic, cex = 0.8)
}
plotlasso()
ldf
