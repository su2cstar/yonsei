plotlasso <- function() {
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
legend(0, 1, legend=colnames(ldf)[1:8],lty = rep(1,8), col=coldic, cex = 0.6)
}
plotlasso()
## use test data and find the minimun mse point
## test data input
test = dat[!dat$train,]
normalize = function(vec){
(vec-mean(vec))/sqrt((1/length(vec)) * sum((vec-mean(vec))^2) )
}
nor_test = apply(X = test,FUN = normalize ,MARGIN = 2)
nor_te1st = data.frame(nor_test)
test_x = nor_test[,-9:-10]
test_y = test[,9]
## make the mse function and add test mse column
return_mse = function(beta){
yhat = as.matrix(test_x)%*%as.matrix(beta)
return(sum((yhat-test_y)^2))
}
ldf$test_mse = apply(X = ldf[,-9],FUN = return_mse ,MARGIN = 1)
## plot with minimum mse point
plotlasso_withmse <- function() {
coldic = c('red','orange','purple','blue','gray','black','darkblue','violet')
plot(x=ldf$shrinkage,y=ldf[,1],type= 'l',lty = 1 ,col='red',xlim=c(0,1),ylim=c(-0.3,1),ylab="Coefficients", xlab="Shringate Factor s")
lines(x=ldf$shrinkage,y=ldf[,2],lty = 1, col = 'orange')
lines(x=ldf$shrinkage,y=ldf[,3],lty = 1, col = 'purple')
lines(x=ldf$shrinkage,y=ldf[,4],lty = 1, col = 'blue')
lines(x=ldf$shrinkage,y=ldf[,5],lty = 1, col = 'gray')
lines(x=ldf$shrinkage,y=ldf[,6],lty = 1, col = 'black')
lines(x=ldf$shrinkage,y=ldf[,7],lty = 1, col = 'darkblue')
lines(x=ldf$shrinkage,y=ldf[,8],lty = 1, col = 'violet')
abline(h = 0 , lty=2)
abline(v=ldf[ldf$test_mse==min(ldf$test_mse),]$shrinkage, lty=2 , col='red')
legend(0, 1, legend=colnames(ldf)[1:8],lty = rep(1,8), col=coldic, cex = 0.6)
}
plotlasso_withmse()
## coefficient when test mse is minimum
ldf[ldf$test_mse==min(ldf$test_mse),]
## minimum lambda when all coefiicients are zero
print(rownames(head(ldf[ldf$lcavol==0,],1)))
head(ldf[ldf$lcavol==0,],1)
var(c(1,2,3,4,5,6))
sqrt(3.5)
x=(1,2,3,4,5,6)
x-mean(x)
x=(1,2,3,4,5,6)
x-mean(x)
x=c(1,2,3,4,5,6)
x-mean(x)
(x-mean(x))^2
mean((x-mean(x))^2)
91/6 -3.5^2
-3.5^2
91/6
test <- function() {
print("output")
}
test()
invisible(test())
c(invisible(test()) )
c(invisible(test()))
test()
install.packages('survMisc')
library(survMisc)
library(survival)
set.seed(2018321085)
#(a)
n=200
u=runif(n,0,1)
rho=1
T=-1/rho*log(1-u)
c=4
C=runif(n,0,4)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data=data.frame(T,C,Delta,X)
cardio_data
wlrtest=function(Beta,n)
{
Z=0
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho/size*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_null=data.frame(X,Delta,Z=rep(Z,n))
cardio_data_null
Z=1
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_alt=data.frame(X,Delta,Z=rep(Z,n))
cardio_data_alt
Fulldata=rbind(cardio_data_null,cardio_data_alt)
wlr_test <- ten(Surv(time = X, event = Delta)~ Z, data = Fulldata)
testout=comp(wlr_test)
return(attr(wlr_test,"lrt")[c(1,3,6)]$pChisq)
}
count_lrt=0
count_Tw=0
count_G=0
for (i in 1:2000){
if(0.05>wlrtest(0,200)[1])
{count_lrt=count_lrt+1}
if(0.05>wlrtest(0,200)[2])
{count_Tw=count_Tw+1}
if(0.05>wlrtest(0,200)[3])
{count_G=count_G+1}
}
wlrtest(0,200)
wlrtest=function(Beta,n)
{
Z=0
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho/size*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_null=data.frame(X,Delta,Z=rep(Z,n))
#cardio_data_null
Z=1
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_alt=data.frame(X,Delta,Z=rep(Z,n))
#cardio_data_alt
Fulldata=rbind(cardio_data_null,cardio_data_alt)
wlr_test <- ten(Surv(time = X, event = Delta)~ Z, data = Fulldata)
testout=comp(wlr_test)
return(attr(wlr_test,"lrt")[c(1,3,6)]$pChisq)
}
wlrtest(0,200)
View(wlrtest)
View(wlrtest)
Beta = 0
n = 200
Z=0
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho/size*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_null=data.frame(X,Delta,Z=rep(Z,n))
Z=1
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_alt=data.frame(X,Delta,Z=rep(Z,n))
Fulldata=rbind(cardio_data_null,cardio_data_alt)
wlr_test <- ten(Surv(time = X, event = Delta)~ Z, data = Fulldata)
testout=comp(wlr_test)
?comp
comp(wlr_test)
testout=comp(wlr_test)
data("alloauto", package="KMsurv")
a1 <- ten(Surv(time, delta) ~ type, data=alloauto)
comp(a1, p=c(0, 1), q=c(1, 1))
tmp = comp(a1, p=c(0, 1), q=c(1, 1))
deprintize<-function(f){
return(function(...) {capture.output(w<-f(...));return(w);});
}
deprintize(comp(wlr_test))
suppressMessages(comp(wlr_test))
a=comp(wlr_test)
a
testout=comp(wlr_test)
testout
# Compare:
print.and.return2()
print.and.return2 <- function() {
message("foo")
return("bar")
}
# Compare:
print.and.return2()
suppressMessages(print.and.return2())
?capture.output
print.and.return2 <- function() {
print("foo")
return("bar")
}
capture.output(print.and.return2())
wlrtest(0,200)
capture.output(wlrtest(0,200))
a = capture.output(wlrtest(0,200))
a
a[-1]
tail(a)
tail(a,1)
split('a b c',sep = ' ')
split('[1] 0.1 0.2  0.3', f= c(1,2,3,4) ,sep = ' ')
strsplit(tail(a,1), " ")
a = capture.output(wlrtest(0,200))
b = tail(a,1)
b
strsplit(b, " ")
strsplit(b, " ")[[1]][2]
float(strsplit(b, " ")[[1]][2])
as.numeric(strsplit(b, " ")[[1]][2])
c(as.numeric(strsplit(b, " ")[[1]][2]),as.numeric(strsplit(b, " ")[[1]][2]),as.numeric(strsplit(b, " ")[[1]][2]))
b
c(as.numeric(strsplit(b, " ")[[1]][2]),as.numeric(strsplit(b, " ")[[1]][3]),as.numeric(strsplit(b, " ")[[1]][4]))
c(as.numeric(strsplit(b, " ")[[1]][2]),as.numeric(strsplit(b, " ")[[1]][3]),as.numeric(strsplit(b, " ")[[1]][4]))[2]
silentwlrtest = function(f){
capture = capture.output(f)
lastcomp = tail(a,1)
out = c(as.numeric(strsplit(lastcomp, " ")[[1]][2]),as.numeric(strsplit(lastcomp, " ")[[1]][3]),as.numeric(strsplit(lastcomp, " ")[[1]][4]))
}
silentwlrtest(wlrtest(0,200))
silentwlrtest = function(f){
capture = capture.output(f)
lastcomp = tail(a,1)
out = c(as.numeric(strsplit(lastcomp, " ")[[1]][2]),as.numeric(strsplit(lastcomp, " ")[[1]][3]),as.numeric(strsplit(lastcomp, " ")[[1]][4]))
return(out)
}
silentwlrtest(wlrtest(0,200))
library(survMisc)
library(survival)
set.seed(2018321085)
#(a)
n=200
u=runif(n,0,1)
rho=1
T=-1/rho*log(1-u)
c=4
C=runif(n,0,4)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data=data.frame(T,C,Delta,X)
cardio_data
Beta = 0
n = 200
wlrtest=function(Beta,n)
{
Z=0
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho/size*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_null=data.frame(X,Delta,Z=rep(Z,n))
#cardio_data_null
Z=1
u=runif(n,0,1)
rho=1
size=exp(Beta*Z)
T=-1/rho*log(1-u)
c=4/rho/size
C=runif(n,0,c)
Delta=as.numeric(T<=C)
X=c()
for(i in 1:n){
X[i]=min(C[i],T[i])
}
cardio_data_alt=data.frame(X,Delta,Z=rep(Z,n))
#cardio_data_alt
Fulldata=rbind(cardio_data_null,cardio_data_alt)
wlr_test <- ten(Surv(time = X, event = Delta)~ Z, data = Fulldata)
testout=comp(wlr_test)
return(attr(wlr_test,"lrt")[c(1,3,6)]$pChisq)
}
deprintize(comp(wlr_test))
silentwlrtest = function(f){
capture = capture.output(f)
lastcomp = tail(capture,1)
out = c(as.numeric(strsplit(lastcomp, " ")[[1]][2]),as.numeric(strsplit(lastcomp, " ")[[1]][3]),as.numeric(strsplit(lastcomp, " ")[[1]][4]))
return(out)
}
silentwlrtest(wlrtest(0,200))
dnorm(1)
dnorm(0)
setwd('C:\\Users\\ahn92\\Documents\\dev\\Sources\\02_Lecture_19_1\\01_Intermediate_Statistics\\hw2\\Q5-Markov')
read.csv('illness.csv')
read.csv('illness.csv', encoding = 'utf8')
read.csv('illness.csv', encoding = 'CP949')
read.csv('illness.csv', encoding = 'latin1')
dat = read.csv('illness.csv', encoding = 'latin1')
colnames(dat)
colnames(dat)=c("no" ,"yes"   ,"t.1"   ,"t.2" ,  "s"     ,"t"   )
dat
fit1  = glm(cbind(yes,no) ~ t.1 + t.2 + s+t ,family = binomial, data = dat)
summary(fit1)
dat['yes']
dat['yes']+dat['no']
dat['yes']/(dat['yes']+dat['no'])
dat['p']=dat['yes']/(dat['yes']+dat['no'])
dat
fit1  = glm(p ~ t.1 + t.2 + s+t ,family = binomial, data = dat)
cbind(yes,no)
summary(fit1)
dat2 = read.csv('illness2.csv')
dat2
fit2  = glm(y ~ t.1 + t.2 + s+t ,family = binomial, data = dat2)
summary(fit2)
summary(fit1)
summary(fit2)
setwd('C:\\Users\\ahn92\\Documents\\dev\\Sources\\02_Lecture_19_1\\01_Intermediate_Statistics\\hw2\\Q5-Markov')
dat = read.csv('illness.csv', encoding = 'latin1')
head(dat)
colnames(dat)=c("no" ,"yes"   ,"t.1"   ,"t.2" ,  "s"     ,"t"   )
dat['p']=dat['yes']/(dat['yes']+dat['no'])
fit1  = glm(cbind(yes,no) ~ t.1 + t.2 + s+t ,family = binomial, data = dat)
summary(fit1)
dat['p']=dat['yes']/(dat['yes']+dat['no'])
fit1  = glm(cbind(yes,no) ~ t.1 + s+t ,family = binomial, data = dat)
summary(fit1)
fit1  = glm(cbind(yes,no) ~ t.1 + t.2 + s+t ,family = binomial, data = dat)
summary(fit1)
dchisq(6.87,df=1)
pchisq(6.87,df=1)
1-pchisq(6.87,df=1)
summary(fit1)
1-pchisq(2.3424,df=11)
1-pchisq(6.87,df=1)
1-pchisq(3.12,df=8)
dat
dat = read.csv('illness.csv', encoding = 'latin1')
head(dat)
colnames(dat)=c("no" ,"yes"   ,"t.1"   ,"t.2" ,  "s"     ,"t"   )
dat
aggregate(dat,sum)
aggregate(dat,FUN = sum)
aggregate(dat,FUN = sum , by =no)
aggregate(dat,FUN = sum , by ='no')
aggregate(dat,FUN = sum , by =c('no'))
?aggregate
aggregate(dat,FUN = sum , by =dat$no)
aggregate(. ~ Species, data = iris, mean)
aggregate(len ~ ., data = ToothGrowth, mean)
ToothGrowth
aggregate(cbind(yes,no) ~ t.1  + s+t, sum)
aggregate(cbind(yes,no) ~ t.1  + s+t,data= dat ,sum)
head(dat)
head(dat_first)
fit1  = glm(cbind(yes,no) ~ t.1 + s+t ,family = binomial, data = dat)
dat_first = aggregate(cbind(yes,no) ~ t.1  + s+t,data= dat ,sum)
head(dat_first)
summary(fit1)
dat_first
fit1  = glm(cbind(yes,no) ~ t.1 + s+t ,family = binomial, data = dat_first)
summary(fit1)
setwd('C:\\Users\\ahn92\\Documents\\dev\\Sources\\02_Lecture_19_1\\01_Intermediate_Statistics\\hw2\\Q5-Markov')
dat = read.csv('illness.csv', encoding = 'latin1')
head(dat)
colnames(dat)=c("no" ,"yes"   ,"t.1"   ,"t.2" ,  "s"     ,"t"   )
1-pchisq(3.12,df=8)
fit2  = glm(cbind(yes,no) ~ t.1 + t.2 + s+t ,family = binomial, data = dat)
summary(fit2)
1-pchisq(2.3424,df=11)
setwd("~/dev/Sources/02_Lecture_19_1/01_Intermediate_Statistics/hw2/Q2-AOV")
data = read.csv('extract.csv')
data
data = read.csv('extract.csv',encoding = 'latin1')
data
colnames(data)=c('seed', 'extract',  'n' ,'yes')
data
data[data$seed==0]
data$seed==0
data[data$seed==0]
data[data$seed==0,]
data['no'] = data$n-data$yes
data
data = read.csv('extract.csv',encoding = 'latin1')
colnames(data)=c('seed', 'extract',  'n' ,'yes')
data['no'] = data$n-data$yes
##SeedA
data[data$seed==0,]
data['p'] = data$yes/data$n
##SeedA
data[data$seed==0,]
##SeedA
mean(data[data$seed==0,]$p)
##SeedA
mean(data[data$seed==0,]$p)
##SeedB
mean(data[data$seed==1,]$p)
##Extract1
mean(data[data$extract==0,]$p)
##Extract2
mean(data[data$extract==1,]$p)
source('~/.active-rstudio-document', echo=TRUE)
data[data$seed==0 & extract==0,]
##SeedA & Extract1
mean(data[data$seed==0 & data$extract==0,]$p)
data
aov(p ~ seed + extract,data=data)
summary(aov(p ~ seed + extract,data=data))
summary(aov(p ~ seed + extract + seed*extract,data=data))
data
model = glm(cbind(yes,no) ~ seed + extract, data = data)
model = glm(cbind(yes,no) ~ seed + extract,family = binomial ,data = data)
summary(model)
1-pchisq(98.719,df=20)
##SeedA & Extract1
mean(data[data$seed==0 & data$extract==0,]$p)
##SeedA & Extract2
mean(data[data$seed==0 & data$extract==1,]$p)
##SeedB & Extract1
mean(data[data$seed==1 & data$extract==0,]$p)
##SeedB & Extract2
mean(data[data$seed==1 & data$extract==1,]$p)
summary(aov(p ~ seed + extract,data=data))
row_1 <- c(mean(data[data$seed==0 & data$extract==0,]$p), mean(data[data$seed==0 & data$extract==1,]$p))
row_2 <- c(mean(data[data$seed==1 & data$extract==0,]$p), mean(data[data$seed==1 & data$extract==1,]$p))
data_rbind <- rbind(row_1, row_2)
data_matrix <- matrix(raw_data, byrow=TRUE, nrow=2)
data_matrix <- rbind(row_1, row_2)
di
dimnames(data_matrix) <- list("Seed" = c("A", "B"), "Extract" = c("1", "2"))
data_matrix
##SeedA & Extract2
mean(data[data$seed==0 & data$extract==1,]$p)
chisq.test(data_matrix)
row_1 <- c(sum(data[data$seed==0 & data$extract==0,]$y), sum(data[data$seed==0 & data$extract==1,]$y))
row_2 <- c(sum(data[data$seed==1 & data$extract==0,]$y), sum(data[data$seed==1 & data$extract==1,]$y))
data_matrix <- rbind(row_1, row_2)
dimnames(data_matrix) <- list("Seed" = c("A", "B"), "Extract" = c("1", "2"))
chisq.test(data_matrix)
data_matrix
summary(glm(cbind(yes,no)~seed+extract,family = binomial,data =data))
summary(glm(cbind(yes,no)~seed+extract,family = binomial,data =data))
summary(glm(cbind(yes,no)~seed+extract +seed*extract,family = binomial,data =data))
summary(aov(p ~ seed + extract,data=data))
summary(aov(p ~ seed + extract + seed*extract,data=data))
data = read.csv('extract.csv',encoding = 'latin1')
colnames(data)=c('seed', 'extract',  'n' ,'yes')
data['no'] = data$n-data$yes
data['p'] = data$yes/data$n
##SeedA
mean(data[data$seed==0,]$p)
##SeedB
mean(data[data$seed==1,]$p)
##Extract1
mean(data[data$extract==0,]$p)
##Extract2
mean(data[data$extract==1,]$p)
##SeedA & Extract1
mean(data[data$seed==0 & data$extract==0,]$p)
##SeedA & Extract2
mean(data[data$seed==0 & data$extract==1,]$p)
##SeedB & Extract1
mean(data[data$seed==1 & data$extract==0,]$p)
##SeedB & Extract2
mean(data[data$seed==1 & data$extract==1,]$p)
summary(aov(p ~ seed + extract,data=data))
summary(aov(p ~ seed + extract + seed*extract,data=data))
summary(glm(cbind(yes,no)~seed+extract +seed*extract,family = binomial,data =data))
summary(glm(cbind(yes,no)~seed+extract,family = binomial,data =data))
